print("prediction by model1 ",accuracy_score(y_test,y_pred1))
print("prediction by model2",accuracy_score(y_test,y_pred2))
print("prediction by model3",accuracy_score(y_test,y_pred1))

X=np.array([[3,4],[1,4],[2,3],[6,-1],[7,-1],[5,-3]])
y=np.array([-1,-1,-1,1,1,1])

l=SVC(C=1e5,kernel='linear')
l.fit(X,y)

SVC(C=100000.0, kernel='linear')

print('w= ',l.coef_)
print('b= ',l.intercept_)
print('Indices of support vectors= ',l.support_)
print('Support vectors= ',l.support_vectors_)
print('No. of support vectors from each class= ',l.n_support_)
print('coefficient of support vectors in decision function= ',np.abs(l.dual_coef_))

w=  [[ 0.25 -0.25]]
b=  [-0.75]
Indices of support vectors=  [2 3]
Support vectors=  [[ 2.  3.]
 [ 6. -1.]]
No. of support vectors from each class=  [1 1]
coefficient of support vectors in decision function=  [[0.0625 0.0625]]

import pandas as pd

data=pd.read_csv('glass.csv')
data.head()


Id	RI	Na	Mg	Al	Si	K	Ca	Ba	Fe	Type
0	1	1.52101	13.64	4.49	1.10	71.78	0.06	8.75	0.0	0.0	1
1	2	1.51761	13.89	3.60	1.36	72.73	0.48	7.83	0.0	0.0	1
2	3	1.51618	13.53	3.55	1.54	72.99	0.39	7.78	0.0	0.0	1
3	4	1.51766	13.21	3.69	1.29	72.61	0.57	8.22	0.0	0.0	1
4	5	1.51742	13.27	3.62	1.24	73.08	0.55	8.07	0.0	0.0	1

x=data.drop('Type',axis=1)
y=data.Type

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3)

linear=svm.SVC(kernel='linear')
linear.fit(x_train,y_train)

SVC(kernel='linear')

print(linear.support_vectors_)

[[7.00000e+01 1.52300e+00 1.33100e+01 3.58000e+00 8.20000e-01 7.19900e+01
  1.20000e-01 1.01700e+01 0.00000e+00 3.00000e-02]
 [1.46000e+02 1.51839e+00 1.28500e+01 3.67000e+00 1.24000e+00 7.25700e+01
  6.20000e-01 8.68000e+00 0.00000e+00 3.50000e-01]
 [7.20000e+01 1.51848e+00 1.36400e+01 3.87000e+00 1.27000e+00 7.19600e+01
  5.40000e-01 8.32000e+00 0.00000e+00 3.20000e-01]
 [1.47000e+02 1.51769e+00 1.36500e+01 3.66000e+00 1.11000e+00 7.27700e+01
  1.10000e-01 8.60000e+00 0.00000e+00 0.00000e+00]
 [1.62000e+02 1.51934e+00 1.36400e+01 3.54000e+00 7.50000e-01 7.26500e+01
  1.60000e-01 8.89000e+00 1.50000e-01 2.40000e-01]
 [1.63000e+02 1.52211e+00 1.41900e+01 3.78000e+00 9.10000e-01 7.13600e+01
  2.30000e-01 9.14000e+00 0.00000e+00 3.70000e-01]
 [1.76000e+02 1.52119e+00 1.29700e+01 3.30000e-01 1.51000e+00 7.33900e+01
  1.30000e-01 1.12700e+01 0.00000e+00 2.80000e-01]
 [1.75000e+02 1.52058e+00 1.28500e+01 1.61000e+00 2.17000e+00 7.21800e+01
  7.60000e-01 9.70000e+00 2.40000e-01 5.10000e-01]
 [1.66000e+02 1.52171e+00 1.15600e+01 1.88000e+00 1.56000e+00 7.28600e+01
  4.70000e-01 1.14100e+01 0.00000e+00 0.00000e+00]
 [1.85000e+02 1.51115e+00 1.73800e+01 0.00000e+00 3.40000e-01 7.54100e+01
  0.00000e+00 6.65000e+00 0.00000e+00 0.00000e+00]
 [1.82000e+02 1.51888e+00 1.49900e+01 7.80000e-01 1.74000e+00 7.25000e+01
  0.00000e+00 9.95000e+00 0.00000e+00 0.00000e+00]
 [1.81000e+02 1.51299e+00 1.44000e+01 1.74000e+00 1.54000e+00 7.45500e+01
  0.00000e+00 7.59000e+00 0.00000e+00 0.00000e+00]
 [1.78000e+02 1.51937e+00 1.37900e+01 2.41000e+00 1.19000e+00 7.27600e+01
  0.00000e+00 9.77000e+00 0.00000e+00 0.00000e+00]
 [1.88000e+02 1.52315e+00 1.34400e+01 3.34000e+00 1.23000e+00 7.23800e+01
  6.00000e-01 8.83000e+00 0.00000e+00 0.00000e+00]
 [1.86000e+02 1.51131e+00 1.36900e+01 3.20000e+00 1.81000e+00 7.28100e+01
  1.76000e+00 5.43000e+00 1.19000e+00 0.00000e+00]]
  
  print(linear.n_support_)
  
  [1 2 3 3 4 2]
  
  y_pred=linear.predict(x_test)
  
  from sklearn.metrics import accuracy_score
print(accuracy_score(y_test,y_pred))

0.9846153846153847

from sklearn.metrics import confusion_matrix
print(confusion_matrix(y_test,y_pred))

[[21  0  0  0  0  0]
 [ 0 23  0  0  0  0]
 [ 0  0  4  0  0  0]
 [ 0  0  1  4  0  0]
 [ 0  0  0  0  3  0]
 [ 0  0  0  0  0  9]]
 
 from sklearn.metrics import classification_report
print(classification_report(y_test,y_pred))

              precision    recall  f1-score   support

           1       1.00      1.00      1.00        21
           2       1.00      1.00      1.00        23
           3       0.80      1.00      0.89         4
           5       1.00      0.80      0.89         5
           6       1.00      1.00      1.00         3
           7       1.00      1.00      1.00         9

    accuracy                           0.98        65
   macro avg       0.97      0.97      0.96        65
weighted avg       0.99      0.98      0.98        65

model1=SVC(kernel='sigmoid')
model2=SVC(kernel='poly')
model3=SVC(kernel='rbf')

model1.fit(x_train,y_train)
model2.fit(x_train,y_train)
model3.fit(x_train,y_train)

SVC()

y_pred1=model1.predict(x_test)
y_pred2=model2.predict(x_test)
y_pred3=model3.predict(x_test)

print("prediction by model1 ",accuracy_score(y_test,y_pred1))
print("prediction by model2",accuracy_score(y_test,y_pred2))
print("prediction by model3",accuracy_score(y_test,y_pred1))

prediction by model1  0.676923076923077
prediction by model2 0.8923076923076924
prediction by model3 0.676923076923077
